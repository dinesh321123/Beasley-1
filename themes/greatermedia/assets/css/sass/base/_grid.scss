// global grid variables
$column: golden-ratio(1em, 4) !global;
$gutter: golden-ratio(1em, 2) !global;
$grid-columns: 4 !global;
// this will give us a mobile first approach

// add the visual grid for dev purposes
$visual-grid: true !global;
$visual-grid-color: #6e76ee !global;
$visual-grid-index: front !global;

// max-width for the site
$max-width: 95% !global;

// simple css effect to make images responsive and fluid while also retaining proper aspect ratio
img {
	max-width: 100%;
	@include display(block); // block display will remove additional padding on images
	@include size(null auto); // this will keep images from being stretched at lower resolutions
}

// The `.site-wrap` class is being used in conjunction with the off-canvas mobile navigation. On click of the
// `.mobile-nav--toggle` button, the contents of `.site-wrap` will be pushed to the left by a particular value. This
.page-wrap {
	@include transform(translate(0, 0));
	@include size(100% null);
	@include transition(all 500ms ease-in-out);
	overflow-y: hidden;
}

.container, %container {
	@include outer-container;
}

.main, %main {
	@include size(100% null);
}

.content, %content {
	@include span-columns(4);
	@include padding(2em null);
	@include bp(small) {
		@include span-columns(6);
	}
	@include bp(medium) {
		@include span-columns(8);
	}
	@include bp(large) {
		@include span-columns(10);
	}
	@include bp(x-large) {
		@include span-columns(10);
		@include padding(null 0);
	}
}

.sidebar, %sidebar {
	@include span-columns(4);
	@include padding(2em .5em);
	@include bp(small) {
		@include span-columns(6);
	}
	@include bp(medium) {
		@include span-columns(2);
		@include omega;
	}
	@include bp(large) {
		@include span-columns(3);
	}
	@include bp(x-large) {
		@include span-columns(3);
		@include padding(null 0);
	}
}

.live-player{
	@include position(absolute, 117px 0 null null);
	@include padding(2em null);
	display: none;
	background-color: palette(default, gray);
	@include bp(large){
		@include display(block);
		@include span-columns(2);
		@include size(null 100%);
		@include omega;
		@include box-sizing(border-box);
		color: palette(default);
	}
}