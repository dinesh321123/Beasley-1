// Mixin to create a button
//
// @example scss - Btn Mixin
// @include btn(white, black, 1, 1.5em, .75em);
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {color} $bgcolor - background color of the button
// @param {color} $textcolor - text color of the button
// @param {number | unit} $padding-top-bottom - padding for the top and bottom of the button
// @param {number | unit} $padding-left-right - padding for the left and right of the button
// @param {number | unit} $font-size - font size for the button
//
@mixin btn($bgcolor, $textcolor, $padding-top-bottom, $padding-left-right, $font-size) {
	@include padding($padding-top-bottom $padding-left-right);
	@include margin(null .5em null null);
	@include border-width(0);
	outline: none;
	background-color: color($bgcolor);
	font-family: $sans-serif;
	font-size: $font-size;
	color: color($textcolor) !important;
	text-transform: uppercase;
	cursor: pointer;
	&:hover, &:focus {
		background-color: darken(color($bgcolor), 9%);
		color: color($textcolor);
	}
	&:last-of-type{
		@include margin(null 0 null null);
	}
}

@mixin bp($name) {
	@if not map-has-key($breakpoints, $name) {
		@warn "Invalid breakpoint `#{$name}`.";
	} @else {
		@if map-get($breakpoints, $name) {
			@include media(map-get($breakpoints, $name)){
				@content;
			}
		} @else {
			@content;
		}
	}
}

@mixin spread-value($property, $value-start, $value-end, $bp-start: small, $bp-end: xlarge) {

	@if type-of($value-start) != number or type-of($value-end) != number {
		@warn "Either $value-start or $value-end is not a number: `#{$value-start}` | `#{$value-end}`"
	} @else {
		#{$property}: #{$value-start};
		$value-distance: $value-end - $value-start;
		$bp-distance: get_bp($bp-end) - get_bp($bp-start);
		$bp-keys: map-keys($breakpoints);
		$bp-list: ();

		$i: index($bp-keys, $bp-start);
		@while $i <= length($bp-keys) and nth($bp-keys, $i) != $bp-end {
			$i: $i + 1;
			$bp-list: join($bp-list, nth($bp-keys, $i));
		}

		@each $key in $bp-list {
			$percentage: ( get-bp($key) - get_bp($bp-start) ) / $bp-distance;
			@include bp($key) {
				#{$property}: round-num( ( $value-distance * $percentage ) + $value-start );
			}
		}
	}
}