// Mixin to create a button
//
// @example scss - Btn Mixin
// @include btn(white, black, 1, 1.5em, .75em);
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {color} $bgcolor - background color of the button
// @param {color} $textcolor - text color of the button
// @param {number | unit} $padding-top-bottom - padding for the top and bottom of the button
// @param {number | unit} $padding-left-right - padding for the left and right of the button
// @param {number | unit} $font-size - font size for the button
//
@mixin btn($bgcolor, $textcolor, $padding-top-bottom, $padding-left-right, $font-size) {
	@include padding($padding-top-bottom $padding-left-right);
	@include margin(null .5em null null);
	@include border-width(0);
	outline: none;
	background-color: color($bgcolor);
	font-family: $sans-serif;
	font-size: $font-size;
	color: color($textcolor) !important;
	text-transform: uppercase;
	cursor: pointer;
	&:hover, &:focus {
		background-color: darken(color($bgcolor), 9%);
		color: color($textcolor);
	}
	&:last-of-type{
		@include margin(null 0 null null);
	}
}

// This function is calling a breakpoint value, defined as `$name`, from the `$breakpoints` array located in the
// `_breakpoints.scss`.
//
// @example scss - BP Mixin
// @include bp(small);
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {Breakpoint Name} $name - name of the breakpoint to be called from `$breakpoints` array
// @param {Breakpoints} $breakpoints - references the $breakpoints array located in `_breakpoints.scss`
//
// @content autofill
//
@mixin bp($name) {
	@if not map-has-key($breakpoints, $name) {
		@warn "Invalid breakpoint `#{$name}`.";
	} @else {
		@if map-get($breakpoints, $name) {
			@include media(map-get($breakpoints, $name)){
				@content;
			}
		} @else {
			@content;
		}
	}
}