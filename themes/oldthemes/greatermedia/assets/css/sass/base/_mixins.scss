// Mixin to create a button
//
// @example scss - Btn Mixin
// @include btn(white, black, 1, 1.5em, .75em);
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {palette} $palette - color palette to use with colors
// @param {color} $bgcolor - background color of the button
// @param {color} $textcolor - text color of the button
// @param {number | unit} $padding-top-bottom - padding for the top and bottom of the button
// @param {number | unit} $padding-left-right - padding for the left and right of the button
// @param {number | unit} $font-size - font size for the button
//
@mixin btn($bgcolor, $textcolor, $border-color, $padding-top-bottom, $padding-left-right, $font-size) {
	display: inline-block;
	line-height: 1;
	padding: $padding-top-bottom $padding-left-right;
	margin-right: .5em;
	outline: none;
	background-color: $bgcolor;
	border: 1px solid $border-color;
	font-size: $font-size;
	color: $textcolor;
	text-transform: uppercase;
	cursor: pointer;
	&:hover, &:focus {
		background-color: darken($bgcolor, 9%);
		border-color: darken($border-color, 9%);
		color: $textcolor;
	}
	&:last-of-type{
		margin-right: 0;
	}
	border-radius: 100em; 
}

// Mixin to call a breakpoint value, defined as `$name`, from the `$breakpoints` array located in the
// `_breakpoints.scss`.
//
// @example scss - BP Mixin
// @include bp(small);
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {Breakpoint Name} $name - name of the breakpoint to be called from `$breakpoints` array
// @param {Breakpoints} $breakpoints - references the $breakpoints array located in `_breakpoints.scss`
//
// @content autofill
//
@mixin bp($name) {
	@if not map-has-key($breakpoints, $name) {
		@warn "Invalid breakpoint `#{$name}`.";
	} @else {
		@if map-get($breakpoints, $name) {
			@include media(map-get($breakpoints, $name)){
				@content;
			}
		} @else {
			@content;
		}
	}
}

// Mixin to create an arrow
//
// @example scss - Arrow Mixin
// @include arrow(right, #000, 12px, 12px);
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {Arrow Direction} $direction - direction of the arrow (top, left, right, bottom, top-left, bottom-left, bottom-right)
// @param {Color} $color - color of the arrow (hex, rgb, or rgba)
// @param {Width} $width - width of the arrow (px or em)
// @param {Height} $height - height of the arrow (px or em)
//
@mixin arrow($direction, $color, $width, $height){
	display: block;
	height: 0;
	width: 0;

	@if $direction == 'top' {
		border-left: $width solid transparent;
		border-right: $width solid transparent;
		border-bottom: $height solid $color;
	} @else if $direction == 'right' {
		border-top: $height/2 solid transparent;
		border-bottom: $height/2 solid transparent;
		border-left: $width solid $color;
	} @else if $direction == 'bottom' {
		border-top: $height solid $color;
		border-right: $width/2 solid transparent;
		border-left: $width/2 solid transparent;
	} @else if $direction == 'left' {
		border-top: $height/2 solid transparent;
		border-bottom: $height/2 solid transparent;
		border-right: $width solid $color;
	} @else if $direction == 'top-left' {
		border-top: $width solid $color;
		border-right: $height/2 solid transparent;
	} @else if $direction == 'top-right' {
		border-top: $width solid $color;
		border-left: $height/2 solid transparent;
	} @else if $direction == 'bottom-left' {
		border-bottom: $height/2 solid $color;
		border-right: $width solid transparent;
	} @else if $direction == 'bottom-right' {
		border-bottom: $height/2 solid $color;
		border-left: $width solid transparent;
	}
}

// Mixin to create border radius
//
// @example scss - Border Radius Mixin
// @include border-radius(3px)
// @include border-radius(3px 0 0 3px)
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {Radius} $radius - variable to radius
//
@mixin border-radius($radius...) {
	// defining prefixes so we can use them in mixins below
	$prefixes: ("-webkit", "-moz", "-ms", "-o", "");
	@each $prefix in $prefixes {
		#{$prefix}-border-radius: $radius;
	}

	border-radius: $radius;
}

// Mixin to provide opacity for an element
//
// @example scss - Opacity Mixin
// @include opacity(.8)
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {Opacity} $value - value of the opacity
//
@mixin opacity ($value: 0.5) {
	opacity: $value;
	filter: alpha(opacity=$value * 100);
	-moz-opacity: $value;
	-khtml-opacity: $value;
	zoom: 1;
}

@mixin box-sizing($sizing) {
	-moz-box-sizing: $sizing;
	box-sizing: $sizing;
}

// Mixin to create a css gradient
//
// @example scss - CSS Gradient Mixin
// @include css-gradient(#dfdfdf,#f8f8f8)
//
// @author Allen Moore
// @access private
// @since 0.1.0
//
// @param {CSS Gradient From} $from - the color the gradient will be starting at
// @param {CSS Gradient To} $to - the color the gradient will ending at
//
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

// Mixin to create a css Box Shadow
//
// @example scss - CSS Box Shadow
// @include box-shadow( 0, 1px, 1px, rgba(0, 0, 0, 0.75), inset);
//
//
@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
	-webkit-box-shadow:$top $left $blur $color #{$inset};
	-moz-box-shadow:$top $left $blur $color #{$inset};
	box-shadow:$top $left $blur $color #{$inset};
}

// Mixin to add clearfix behavior to an element
//
// @example scss - CSS clearfix
// @include clearfix();
//
@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

// Mixin to create a thumbnail that's locked to a specific aspect ratio. 
//
// @example scss - Proportional thumbnail, 3:2 aspect ratio
// @include proportional-thumb( 66.6% ); 
//
@mixin proportional-thumbnail( $height-as-percentage ) {
	position: relative; 
	background-position: center center;
	background-size: 100%;
	background-size: cover; 
	background-repeat: no-repeat;
	&:after {
		content: ''; 
		display: block;
		padding-top: $height-as-percentage; 
	}
}

@mixin opacity( $opacity ) {
	opacity: $opacity;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
}

@mixin ratio-percent($height, $width) {
	height: auto;
	overflow: hidden;
	padding-top: percentage($height / $width);
	position: relative;
}

// http://danielstern.ca/range.css/?ref=css-tricks#/
@mixin range-slider {
	input[type=range] {
		background-color: transparent;
		margin: 5px 0;
		width: 100%;
		-webkit-appearance: none;
	}
	input[type=range]:focus {
		outline: none;
	}
	input[type=range]::-webkit-slider-runnable-track {
		background-color: lighten($liveplayer-color, 10%);
		border: 0 none;
		border-radius: 8px;
		box-shadow: none;
		cursor: pointer;
		height: 4px;
		width: 100%;
	}
	input[type=range]::-webkit-slider-thumb {
		background-color: $liveplayer-color;
		border: 1px solid $liveplayer-color;
		border-radius: 50%;
		box-shadow: none;
		cursor: pointer;
		height: 14px;
		margin-top: -5.2px;
		position: relative;
		width: 14px;
		-webkit-appearance: none;

		&:hover {
			background-color: lighten($liveplayer-color, 20%);
		}
	}
	input[type=range]:focus::-webkit-slider-runnable-track {
		background-color: lighten($liveplayer-color, 10%);
	}
	input[type=range]::-moz-range-track {
		background-color: lighten($liveplayer-color, 10%);
		border: 0 none;
		border-radius: 8px;
		box-shadow: none;
		cursor: pointer;
		height: 4px;
		width: 100%;
	}
	input[type=range]::-moz-range-thumb {
		background-color: $liveplayer-color;
		border: 1px solid $liveplayer-color;
		border-radius: 50%;
		box-shadow: none;
		cursor: pointer;
		height: 12px;
		width: 12px;

		&:hover {
			background-color: lighten($liveplayer-color, 20%);
		}
	}
	input[type=range]::-ms-track {
		background-color: transparent;
		border-color: transparent;
		color: transparent;
		cursor: pointer;
		height: 4px;
		width: 100%;
	}
	input[type=range]::-ms-fill-lower {
		background-color: lighten($liveplayer-color, 10%);
		border: 0 none;
		border-radius: 8px;
		box-shadow: none;
	}
	input[type=range]::-ms-fill-upper {
		background-color: lighten($liveplayer-color, 10%);
		border: 0.2px solid lighten($liveplayer-color, 10%);;
		border-radius: 8px;
		box-shadow: none;
	}
	input[type=range]::-ms-thumb {
		background-color: $liveplayer-color;
		border: 1px solid $liveplayer-color;
		border-radius: 50%;
		box-shadow: none;
		cursor: pointer;
		margin-top: 0;
		height: 12px;
		width: 12px;

		&:hover {
			background-color: lighten($liveplayer-color, 20%);
		}
	}
	input[type=range]:focus::-ms-fill-lower {
		background-color: lighten($liveplayer-color, 10%);
	}
	input[type=range]:focus::-ms-fill-upper {
		background-color: lighten($liveplayer-color, 10%);
	}
}