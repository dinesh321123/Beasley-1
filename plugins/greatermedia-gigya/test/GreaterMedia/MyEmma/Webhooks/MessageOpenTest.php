<?php

namespace GreaterMedia\MyEmma\Webhooks;

class MessageOpenTest extends \WP_UnitTestCase {

	public $webhook;

	function setUp() {
		parent::setUp();

		wp_async_task_clear();

		$settings    = array(
			'emma_account_id'  => '1746533',
			'emma_public_key'  => '3e89a3b76be875952b48',
			'emma_private_key' => '519231e76466c2f0bfc0'
		);

		update_option( 'member_query_settings', json_encode( $settings ) );
		$this->webhook = new MessageOpen();
	}

	function tearDown() {
		parent::tearDown();
	}

	function test_it_has_an_event_name() {
		$actual = $this->webhook->get_event_name();
		$this->assertEquals( 'message_open', $actual );
	}

	function test_it_knows_message_mailing_id() {
		$params = array(
			'event_name' => 'message_open',
			'data' => array( 'mailing_id' => '123' )
		);

		$actual = $this->webhook->get_mailing_id( $params );
		$this->assertEquals( '123', $actual );
	}

	function test_it_has_an_emma_api() {
		$api1 = $this->webhook->get_emma_api();
		$api2 = $this->webhook->get_emma_api();
		$this->assertSame( $api1, $api2 );
	}

	function _test_it_knows_groups_for_a_valid_mailing() {
		$actual = $this->webhook->get_groups_for_mailing( '19491429' );
		$this->assertEquals( array( 2738789 ), $actual );
	}

	function _test_it_knows_groups_for_an_unknown_mailing() {
		$actual = $this->webhook->get_groups_for_mailing( '123' );
		$this->assertEmpty( $actual );
	}

	function test_it_can_build_meta_query_for_groups() {
		$groups = array( '1', '2' );
		$actual = $this->webhook->get_meta_query_for_groups( $groups );
		$expected = array(
			'relation' => 'OR',
			array( 'key' => 'mqsm_email_segment_id', 'value' => '1', 'compare' => '=' ),
			array( 'key' => 'mqsm_email_segment_id', 'value' => '2', 'compare' => '=' ),
		);

		$this->assertEquals( $expected, $actual );
	}

	function test_it_knows_if_group_has_no_member_queries_associated_with_it() {
		$groups = array( '1', '2' );
		$actual = $this->webhook->get_member_queries_for_groups( $groups );

		$this->assertEmpty( $actual );
	}

	function test_it_knows_member_queries_associated_with_groups() {
		$posts = array();
		$post_ids = array();
		$group_ids = array();

		foreach ( range( 1, 5 ) as $i ) {
			$post       = $this->factory->post->create_and_get();
			$post_ids[] = $post->ID;

			$group_id    = 100 + $post->ID;
			$group_ids[] = $group_id;

			update_post_meta( $post->ID, 'mqsm_email_segment_id', $group_id );
		}

		$actual = $this->webhook->get_member_queries_for_groups( $group_ids );
		sort( $actual );
		$this->assertEquals( $post_ids, $actual );
	}

	function test_it_knows_member_queries_associated_with_mailing() {
		$posts    = array();
		$post_ids = array();

		foreach ( range( 1, 5 ) as $i ) {
			$post = $this->factory->post->create_and_get();
			$post_ids[] = $post->ID;

			$group_id    = '2738789';
			update_post_meta( $post->ID, 'mqsm_email_segment_id', $group_id );
		}

		$actual = $this->webhook->get_member_queries_for_mailing( '19491429' );
		sort( $actual );
		$this->assertEquals( $post_ids, $actual );
	}

	function test_it_knows_mailing_does_not_belong_to_any_static_group() {
		$actual = $this->webhook->get_static_groups_for_mailing( '123' );
		$this->assertEmpty( $actual );
	}

	function test_it_knows_static_groups_that_mailing_belongs_to() {
		$emma_groups = array(
			array( 'group_id' => '2738789' ),
		);

		update_option( 'emma_groups', json_encode( $emma_groups ) );

		$actual = $this->webhook->get_static_groups_for_mailing( '19491429' );
		$this->assertEquals( array( '2738789' ), $actual );
	}

	function test_it_can_build_action_to_save() {
		$actual = $this->webhook->get_action_to_save(
			'member_query_message_open',
			'123',
			'foo'
		);

		$expected = array(
			'actionType' => 'action:member_query_message_open',
			'actionID' => '123',
			'actionData' => array(
				array( 'name' => 'subject', 'value' => 'foo' ),
			),
		);

		$this->assertEquals( $expected, $actual );
	}

	function test_it_can_build_actions_to_save() {
		$groups = array( '123', '456' );
		$actual = $this->webhook->get_actions_to_save(
			'member_query_message_open',
			$groups,
			'foo'
		);

		$expected = array(
			array(
				'actionType' => 'action:member_query_message_open',
				'actionID' => '123',
				'actionData' => array(
					array( 'name' => 'subject', 'value' => 'foo' ),
				),
			),
			array(
				'actionType' => 'action:member_query_message_open',
				'actionID' => '456',
				'actionData' => array(
					array( 'name' => 'subject', 'value' => 'foo' ),
				),
			),
		);

		$this->assertEquals( $expected, $actual );
	}

	function test_it_knows_the_mailing_subject() {
		$params = array( 'data' => array( 'subject' => 'foo' ) );
		$actual = $this->webhook->get_subject( $params );
		$this->assertEquals( 'foo', $actual );
	}

	function test_it_can_save_message_actions() {
		$groups = array(
			'123', '456'
		);

		$actual = $this->webhook->save_message_actions( 'member_query_message_open', $groups, 'foo', 'foo_user' );
		$task = wp_async_task_last_added();

		$this->assertEquals( 'foo_user', $task['params']['user_id'] );

		$actions = $task['params']['actions'];

		$action = $actions[0];
		$this->assertEquals( 'action:member_query_message_open', $action['actionType'] );
		$this->assertEquals( '123', $action['actionID'] );

		$action = $actions[1];
		$this->assertEquals( 'action:member_query_message_open', $action['actionType'] );
		$this->assertEquals( '456', $action['actionID'] );
	}

	function test_it_can_queue_mailing_message_open_for_unknown_mailing_id() {
		$params = array(
			'data' => array(
				'mailing_id' => '123',
				'member_id' => '715065957',
				'subject' => 'foo',
			)
		);

		$this->webhook->run( $params );
		$actual = wp_async_task_count();

		$this->assertEquals( 1, $actual );

		$task = wp_async_task_last_added();

		$this->assertEquals( '34dc27adf622457abfa161c906f32fb4', $task['params']['user_id'] );
		$actions = $task['params']['actions'];

		$action = $actions[0];
		$this->assertEquals( 'action:mailing_message_open', $action['actionType'] );
		$this->assertEquals( '123', $action['actionID'] );
	}

	function test_it_will_queue_member_query_message_open_action_on_run() {
		$post = $this->factory->post->create_and_get();
		update_post_meta( $post->ID, 'mqsm_email_segment_id', '2738789' );

		$params = array(
			'data' => array(
				'mailing_id' => '19491429',
				'member_id' => '715065957',
				'subject' => 'foo',
			)
		);

		$this->webhook->run( $params );
		$actual = wp_async_task_count();

		$this->assertEquals( 1, $actual );

		$task = wp_async_task_last_added();

		$this->assertEquals( '34dc27adf622457abfa161c906f32fb4', $task['params']['user_id'] );
		$actions = $task['params']['actions'];

		$action = $actions[0];
		$this->assertEquals( 'action:member_query_message_open', $action['actionType'] );
		$this->assertEquals( $post->ID, $action['actionID'] );
	}

	function test_it_will_queue_static_group_message_open_action_on_run() {
		$emma_groups = array(
			array( 'group_id' => '2738789' ),
		);

		update_option( 'emma_groups', json_encode( $emma_groups ) );

		$params = array(
			'data' => array(
				'mailing_id' => '19491429',
				'member_id' => '715065957',
				'subject' => 'foo',
			)
		);

		$this->webhook->run( $params );
		$actual = wp_async_task_count();

		$this->assertEquals( 1, $actual );

		$task = wp_async_task_last_added();

		$this->assertEquals( '34dc27adf622457abfa161c906f32fb4', $task['params']['user_id'] );
		$actions = $task['params']['actions'];

		$action = $actions[0];
		$this->assertEquals( 'action:static_group_message_open', $action['actionType'] );
		$this->assertEquals( '2738789', $action['actionID'] );
	}

}
